T.c --> O(logm)
S.c --> O(1)
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
      if(nums1 == null && nums2 == null){
        return -1.0;
      }
      int m = nums1.length;
      int n = nums2.length;
      if(m>n){
        return findMedianSortedArrays(nums2,nums1);
      }
      int low = 0;
      int high = m;
      while(low <= high){
       int partx = low+(high-low)/2;
       int party = (m+n)/2 -partx;
       int l1 = (partx == 0) ? Integer.MIN_VALUE: nums1[partx-1];
       int r1 = (partx == m) ? Integer.MAX_VALUE: nums1[partx];
       int l2 = (party == 0) ? Integer.MIN_VALUE: nums2[party-1];
       int r2 = (party == n) ? Integer.MAX_VALUE: nums2[party];
       
       if(l1<=r2 && l2<=r1){
        if((m+n)%2 == 0){            
            return (double) (Math.max(l1,l2)+Math.min(r1,r2))/2;
        }
        return (double)  Math.min(r1,r2);
       }
       if(l1>r2){
        high = partx-1;
       }else if(l2>r1){
        low = partx+1;
       }
      }
      return -1.0;       
    }
}